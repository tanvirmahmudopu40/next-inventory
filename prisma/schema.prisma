generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id       String  @id @default(cuid())
  title    String
  description String?
  price    Float
  brand    String?
  image    String?
  stock    Int
  category String
  brandId  String?
}

model Order {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  invoiceNo    String   @unique @default(cuid())
  subtotal     Float
  total        Float
  itemsSummary Json     // Will store complete items data
  customerName String?  @default("Walk-in Customer")
  paymentMethod String  @default("Cash")
  status       String   @default("completed")
  tax          Float    @default(0)
  discount     Float    @default(0)
  notes        String?
  cashierName  String   @default("Admin")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  // Reference without relation
  productId   String  // Reference without relation
  productName String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  category    String  @default("Uncategorized")
  itemDetails Json?
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  address   String
  city      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id          String      @id @default(cuid())
  invoiceNo   String      @unique
  date        DateTime
  supplier    String      // Changed from relation to simple string
  warehouse   String      // Changed from relation to simple string
  status      String      @default("PENDING") // PENDING, RECEIVED, ORDERED
  totalAmount Float
  tax         Float    @default(0)
  shipping    Float    @default(0)
  note        String?
  items       Json        // Store items as JSON instead of relations
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseReturn {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  purchaseId  String
  invoiceNo   String
  supplier    String
  warehouse   String
  totalAmount Float    @default(0)
  note        String?
  items       Json   // This will store the returned items
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SaleReturn {
  id           String   @id @default(cuid())
  date         DateTime
  orderId      String
  invoiceNo    String
  customerName String
  totalAmount  Float
  note         String?
  items        Json     // This will store the array of returned items
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  category    String
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id          String   @id @default(cuid())
  title       String
  phone       String
  email       String
  address     String
  footerText  String
  logo        String?
  currency    String   @default("USD")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Staff {
  id            String    @id @default(cuid())
  userId        String    @unique
  name          String
  email         String    @unique
  department    String
  designation   String
  joiningDate   DateTime  @default(now())
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  STAFF
}
 